const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

const potentialExploits = [];
const exploitsInThisScript = [];

function getManifestData(folderPath) {
    const manifestPath = path.join(folderPath, 'fxmanifest.lua');
    const manifestContent = fs.readFileSync(manifestPath, 'utf-8');
    const clientFiles = getClientFiles(manifestContent);
    const serverFiles = getServerFiles(manifestContent);
    const sharedFiles = getSharedFiles(manifestContent);

    return {
        clientFiles: clientFiles.map(file => path.join(folderPath, file)),
        serverFiles: serverFiles.map(file => path.join(folderPath, file)),
        sharedFiles: sharedFiles.map(file => path.join(folderPath, file))
    };
}

function getClientFiles(manifestContent) {
    const pattern = /client_scripts\s*{([^}]*)}/gms;
    const match = pattern.exec(manifestContent);
    if (!match) return [];
    return match[1]
        .split(',')
        .map(file => file.trim().replace(/['"]/g, ''));
}

function getServerFiles(manifestContent) {
    const pattern = /server_scripts\s*{([^}]*)}/gms;
    const match = pattern.exec(manifestContent);
    if (!match) return [];
    return match[1]
        .split(',')
        .map(file => file.trim().replace(/['"]/g, ''));
}

function getSharedFiles(manifestContent) {
    const pattern = /shared_scripts\s*{([^}]*)}/gms;
    const match = pattern.exec(manifestContent);
    if (!match) return [];
    return match[1]
        .split(',')
        .map(file => file.trim().replace(/['"]/g, ''));
}

function getTriggers(content) {
    const pattern = /TriggerServerEvent\s*\(\s*['"]([^'"]*)['"]/gms;
    const matches = content.matchAll(pattern);
    const triggers = [];
    for (const match of matches) {
        triggers.push(match[1]);
    }
    return triggers;
}

function checkForExploits(filePath, triggers) {
    if (!fs.existsSync(filePath) || fs.lstatSync(filePath).isDirectory() || path.basename(filePath) === 'secure.lua') {
        return;
    }

    const content = fs.readFileSync(filePath, 'utf-8');
    triggers.forEach(trigger => {
        const pattern = new RegExp(`AddEventHandler\\(["']${trigger}["'],\\s*function\\((.*?)\\)`, 'gms');
        const matches = content.matchAll(pattern);
        for (const match of matches) {
            if (!match[1].includes('if') && !match[1].includes('for') && !match[1].includes('while') && !match[1].includes('until')) {
                console.log(`Možný exploit nalezen v souboru ${filePath}`);
                potentialExploits.push({path:filePath, event:trigger});
                break;
            }
        }
    });
}
function secureCode(filePath, triggers) {
    if (!fs.existsSync(filePath.path)) {
        console.log('File does not exist:', filePath.path);
        return;
    }
    if (fs.lstatSync(filePath.path).isDirectory()) {
        console.log('Path is a directory:', filePath.path);
        return;
    }
    if (path.basename(filePath.path) === 'secure.lua') {
        console.log('File is secure.lua:', filePath.path);
        return;
    }


    let content = fs.readFileSync(filePath.path, 'utf-8');
    triggers.forEach(trigger => {
        pattern = new RegExp(`AddEventHandler\\(["']${trigger}["'],\\s*function\\((.*?)\\)(.*?)(end)`, 'gms');
        let match = pattern.exec(content);
        if (match === null) {
            console.log(`No match for trigger "${trigger}" in file "${filePath.path}".`);
            return;
        }
        content = content.replace(pattern, (match, params, handlerContent) => {
            const secureHandlerContent = handlerContent.trim().replace(/(\r?\n)+/g, '\n    ');
            exploitsInThisScript.push(trigger);
            return `AddEventHandler("${trigger}", function(${params})\n    if CanTrustPlayer(source) then\n        ${secureHandlerContent}\n    end\nend`;
        });
        console.log(trigger + " secure DONE!");

        fs.writeFileSync(filePath.path, content, 'utf-8');
    });
}

function addSecureToManifest(folderPath) {
    const securePath = path.join(__dirname, 'secure.lua');
    const manifestPath = path.join(folderPath, 'fxmanifest.lua');
    const content = fs.readFileSync(manifestPath, 'utf-8');
    fs.copyFileSync(securePath, path.join(folderPath, 'secure.lua'));
    if (!content.includes('secure.lua')) {
        const updatedContent = content.replace('shared_scripts {', 'shared_scripts {\n    \'secure.lua\',');
        fs.writeFileSync(manifestPath, updatedContent, 'utf-8');
    }
}

rl.question('Zadejte cestu k vašim souborům: ', folderPath => {
    const { clientFiles, serverFiles, sharedFiles } = getManifestData(folderPath);
    const triggers = [];

    [...clientFiles, ...sharedFiles].forEach(file => {
        if (!fs.existsSync(file) || fs.lstatSync(file).isDirectory()) {
            console.log(`Soubor ${file} neexistuje nebo je to složka.`);
            return;
        }
        const content = fs.readFileSync(file, 'utf-8');
        triggers.push(...getTriggers(content));
    });

    [...serverFiles, ...sharedFiles].forEach(file => {
        checkForExploits(file, triggers);
    });

    console.log(`\x1b[32m\nPočet potenciálních exploitů: ${potentialExploits.length}\n\x1b[0m`);
    potentialExploits.forEach(potnexp => {
        console.log(potnexp.event +" : "+potnexp.path);
    });
    if(potentialExploits.length !== 0){
        rl.question('Chcete zabezpečit vaše soubory? (y/n): ', input => {
            if (input.toLowerCase() === 'y') {
                potentialExploits.forEach(file => {
                    secureCode(file, triggers);
                });
                addSecureToManifest(folderPath);
                console.log("-----------------------------------------------------------");
                console.log("Secured events:");
                exploitsInThisScript.forEach(evnt => {
                    [...clientFiles, ...sharedFiles].forEach(file => {
                        if (!fs.existsSync(file) || fs.lstatSync(file).isDirectory()) {
                            console.log(`Soubor ${file} neexistuje nebo je to složka.`);
                            return;
                        }
                        let content = fs.readFileSync(file, 'utf-8');
                        let pattern = new RegExp(`TriggerServerEvent\\(["']${evnt}["']`, 'gms');
                        let replacement = `TriggerSecureEvent("${evnt}"`;
                        content = content.replace(pattern, replacement);
                        fs.writeFileSync(file, content, 'utf-8');
                    });
                    console.log(evnt+ " \n");
                });

            }
            rl.close();
        });
    }else{
        console.log("Tvůj script se zdá být v pořádku.")
    }
});
